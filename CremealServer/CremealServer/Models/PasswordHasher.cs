using System.Security.Cryptography;

namespace CremealServer.Models
{
    /// <summary>
    /// Interface for password hashing.
    /// </summary>
    public interface IPasswordHasher
    {
        string Hash(string password);
        bool Verify(string passwordHash, string inputPassword);
    }


    /// <summary>
    /// Implementation of password hashing and verification using PBKDF2 with SHA-256.
    /// </summary>
    public class PasswordHasher : IPasswordHasher
    {
        // random generated byte arraty that will be added to our hash
        private const int SaltSize = 128 / 8; // Size of the salt in bytes
        // for the hashing algorithm 256 bit
        private const int KeySize = 256 / 8; // Size of the hash in bytes
        // increasing the loop in the creation at least 10,000
        private const int Iterations = 10000; // Number of iterations for the hashing algorithm
        private static readonly HashAlgorithmName _hashAlgorithmName = HashAlgorithmName.SHA256;

        private static char Delimiter = ';';



        /// <summary>
        /// Hashes the specified password with a randomly generated salt.
        /// </summary>
        /// <param name="password">The password to hash.</param>
        /// <returns>The hashed password, including the salt.</returns>
        public string Hash(string password)
        {
            var salt = RandomNumberGenerator.GetBytes(SaltSize);
            var hash = Rfc2898DeriveBytes.Pbkdf2(password, salt, Iterations, _hashAlgorithmName, KeySize);
            

            return String.Join(Delimiter,Convert.ToBase64String(salt),Convert.ToBase64String(hash));
        }

        /// <summary>
        /// Verifies the input password against the stored password hash.
        /// </summary>
        /// <param name="passwordHash">The stored password hash (including the salt).</param>
        /// <param name="inputPassword">The input password to verify.</param>
        /// <returns>True if the password matches the hash; otherwise, false.</returns>
        public bool Verify(string passwordHash, string inputPassword)
        {
            var elemnts = passwordHash.Split(Delimiter);
            var salt = Convert.FromBase64String(elemnts[0]);
            var hash = Convert.FromBase64String(elemnts[1]);

            var hashInput = Rfc2898DeriveBytes.Pbkdf2(inputPassword,salt,Iterations, _hashAlgorithmName, KeySize);

            return CryptographicOperations.FixedTimeEquals(hash, hashInput);

        }
    }
}
